--- ./src/gens/util/file/save.c~	2008-10-05 15:39:02.000000000 +0000
+++ ./src/gens/util/file/save.c	2013-02-27 15:36:22.000000000 +0000
@@ -152,7 +152,7 @@
 	extensions = g_list_append(extensions,Ext);
 	file_selector_add_type(&fd,"", extensions);
 	gtk_widget_show(widget);
-	filename = fileselection_get_filename(fd.filesel);	
+	filename = fileselection_get_filename(fd.filesel);
 
 	if (filename)
 		{
@@ -210,7 +210,7 @@
 	for(i = 0; i < 0x80; i++) CRam[i] = Data[i + 0x112];
 	for(i = 0; i < 0x50; i++) VSRam[i] = Data[i + 0x192];
 	for(i = 0; i < 0x2000; i++) Ram_Z80[i] = Data[i + 0x474];
-	
+
 	for(i = 0; i < 0x10000; i += 2)
 	{
 		Ram_68k[i + 0] = Data[i + 0x2478 + 1];
@@ -273,7 +273,7 @@
 		Ctrl.Flag = Data[0x44];
 		Ctrl.DMA = (Data[0x45] & 1) << 2;
 		Ctrl.Address = Data[0x48] + (Data[0x49] << 8);
-		
+
 		src = (unsigned char *) &Bank_Z80;
 		for(i = 0; i < 4; i++) *src++ = Data[i + 0x43C];
 
@@ -301,7 +301,7 @@
 	main68k_GetContext(&Context_68K);
 
 	for(i = 0; i < 24; i++) Set_VDP_Reg(i, Data[0xFA + i]);
-	
+
 	src = (unsigned char *) &Context_68K.dreg[0];
 	for(i = 0; i < 8 * 2 * 4; i++) *src++ = Data[0x80 + i];
 
@@ -461,7 +461,7 @@
 }
 
 
-void Import_SegaCD(unsigned char *Data) 
+void Import_SegaCD(unsigned char *Data)
 {
 	struct S68000CONTEXT Context_sub68K;
 	unsigned char *src;
@@ -480,7 +480,7 @@
 
 		src = (unsigned char *) &(Context_sub68K.sr);
 		for(i = 0; i < 2; i++) *src++ = Data[0x50 + i];
-		
+
 		src = (unsigned char *) &Context_68K.asp;
 		if(Data[0x51] & 0x20)
 		{
@@ -492,7 +492,7 @@
 			// User
 			for(i = 0; i < 4; i++) *src++ = Data[0x56 + i];
 		}
-		
+
 		src = (unsigned char *) &(Context_sub68K.odometer);
 		for(i = 0; i < 4; i++) *src++ = Data[0x5A + i];
 
@@ -502,9 +502,9 @@
 		for (i = 0; i < 4; i++) *src++ = Data[0x6C + i];
 
 	//here ends sub68k bit
-	
+
 	sub68k_SetContext(&Context_sub68K);
-	
+
 	//PCM Chip Load
 		src = (unsigned char *) (&PCM_Chip.Rate);
 		for (i = 0; i < 4; i++) *src++ = Data[0x100 + i];
@@ -512,7 +512,7 @@
 		for (i = 0; i < 4; i++) *src++ = Data[0x104 + i];
 		src = (unsigned char *) (&PCM_Chip.Cur_Chan);
 		for (i = 0; i < 4; i++) *src++ = Data[0x108 + i];
-		src = (unsigned char *) (&PCM_Chip.Bank);	
+		src = (unsigned char *) (&PCM_Chip.Bank);
 		for (i = 0; i < 4; i++) *src++ = Data[0x10C + i];
 
 		for (j = 0; j < 8; j++)
@@ -608,7 +608,7 @@
 	//Word RAM state
 
 	for(i = 0; i < 0x80000; i++) Ram_Prg[i] = Data[0x1000 + i]; //Prg RAM
-	
+
 	//Word RAM
 		if ((unsigned int) Data[0x0F03] >= 2) for(i = 0; i < 0x20000; i++) Ram_Word_1M[i] = Data[0x81000 + i]; //1M mode
 		else for(i = 0; i < 0x40000; i++) Ram_Word_2M[i] = Data[0x81000 + i]; //2M mode
@@ -616,7 +616,7 @@
 	//Word RAM end
 
 	for(i = 0; i < 0x10000; i++) Ram_PCM[i] = Data[0xC1000 + i]; //PCM RAM
-	
+
 
 	//CDD & CDC Data
 		//CDD
@@ -677,7 +677,7 @@
 }
 
 
-void Export_SegaCD(unsigned char *Data) 
+void Export_SegaCD(unsigned char *Data)
 {
 	struct S68000CONTEXT Context_sub68K;
 	unsigned char *src;
@@ -728,7 +728,7 @@
 		for (i = 0; i < 4; i++) Data[0x104 + i] = *src++;
 		src = (unsigned char *) (&PCM_Chip.Cur_Chan);
 		for (i = 0; i < 4; i++) Data[0x108 + i] = *src++;
-		src = (unsigned char *) (&PCM_Chip.Bank);	
+		src = (unsigned char *) (&PCM_Chip.Bank);
 		for (i = 0; i < 4; i++) Data[0x10C + i] = *src++;
 
 		for (j = 0; j < 8; j++)
@@ -823,7 +823,7 @@
 	//Word RAM state
 
 	for(i = 0; i < 0x80000; i++) Data[0x1000 + i] = Ram_Prg[i]; //Prg RAM
-	
+
 	//Word RAM
 		if (Ram_Word_State >= 2) { //1M mode
 			for(i = 0; i < 0x20000; i++) Data[0x81000 + i] = Ram_Word_1M[i];
@@ -915,7 +915,7 @@
 		}
 		if (_32X_Started)
 		{
-			Import_32X(buf); 
+			Import_32X(buf);
 			buf += G32X_LENGHT_EX; //upthmodif - fixed for new, additive, lenght determination
 		}
 
@@ -960,7 +960,7 @@
 		Export_32X(buf);
 		buf += G32X_LENGHT_EX; //upthmodif - fixed for new, additive, lenght determination
 	}
-	
+
 	fwrite(State_Buffer, 1, len, f);
 	fclose(f);
 
@@ -975,7 +975,7 @@
 Load_State (char *Name)
 {
   if(SegaCD_Started) return Load_State_SCD(Name);
-  
+
   FILE *f;
   unsigned char *buf;
   int len;
@@ -1154,7 +1154,7 @@
 -----------------
 
 00040 : last VDP Control data written (DWORD)
-00044 : second write flag (1 for second write) 
+00044 : second write flag (1 for second write)
 00045 : DMA Fill flag (1 mean next data write will cause a DMA fill)
 00048 : VDP write address (DWORD)
 
@@ -1610,14 +1610,14 @@
   M68K_Set_32X_Rom_Bank ();
 
 	/*******
-	FIFO stuff to add here...	
+	FIFO stuff to add here...
 	 *******/
   for (i = 0; i < 0x10; i++)
     SH2_Write_Byte (&M_SH2, 0x4020 + i, Data[0x2740 + i]);
   for (i = 0; i < 4; i++)
     SH2_Write_Byte (&M_SH2, 0x4030 + i, Data[0x2750 + i]);
 	/*******
-	Extra PWM stuff to add here...	
+	Extra PWM stuff to add here...
 	 *******/
 
   // Do it to allow VDP write on 32X side
@@ -1767,14 +1767,14 @@
   Data[0x2704] = Bank_SH2;
 
 	/*******
-	FIFO stuff to add here...	
+	FIFO stuff to add here...
 	 *******/
   for (i = 0; i < 0x10; i++)
     Data[0x2740 + i] = SH2_Read_Byte (&M_SH2, 0x4020 + i);
   for (i = 0; i < 4; i++)
     Data[0x2750 + i] = SH2_Read_Byte (&M_SH2, 0x4030 + i);
 	/*******
-	Extra PWM stuff to add here...	
+	Extra PWM stuff to add here...
 	 *******/
 
   // Do it to allow VDP write on 32X side
@@ -1890,10 +1890,10 @@
   sprintf(Str_Tmp, "%d", Width_gl);
   WritePrivateProfileString("Graphics", "Opengl Width", Str_Tmp, Conf_File);
   sprintf(Str_Tmp, "%d", Height_gl);
-  WritePrivateProfileString("Graphics", "Opengl Height", Str_Tmp, Conf_File);			     
-//  sprintf(Str_Tmp, "%d", gl_linear_filter);
-//  WritePrivateProfileString("Graphics", "Opengl Filter", Str_Tmp, Conf_File);
-  sprintf (Str_Tmp, "%d", Stretch & 1);  
+  WritePrivateProfileString("Graphics", "Opengl Height", Str_Tmp, Conf_File);
+  sprintf(Str_Tmp, "%d", gl_linear_filter);
+  WritePrivateProfileString("Graphics", "Opengl Filter", Str_Tmp, Conf_File);
+  sprintf (Str_Tmp, "%d", Stretch & 1);
   WritePrivateProfileString ("Graphics", "Stretch", Str_Tmp, Conf_File);
   sprintf (Str_Tmp, "%d", Blit_Soft & 1);
   WritePrivateProfileString ("Graphics", "Software Blit", Str_Tmp, Conf_File);
--- ./src/gens/emulator/g_main.h~	2007-06-13 04:18:20.000000000 +0000
+++ ./src/gens/emulator/g_main.h	2013-02-27 15:37:13.000000000 +0000
@@ -17,7 +17,7 @@
 extern int Width_gl;
 extern int Height_gl;
 extern int Bpp;
-//extern int gl_linear_filter;
+extern int gl_linear_filter;
 extern int Show_FPS;
 extern int Show_Message;
 extern int Show_LED;
@@ -42,7 +42,7 @@
 extern char Manual_Path[1024];
 
 extern char **language_name;
-	
+
 extern unsigned char Keys[];
 extern unsigned char joystate[];
 
--- ./src/gens/emulator/g_main.c~	2008-09-01 21:17:54.000000000 +0000
+++ ./src/gens/emulator/g_main.c	2013-02-27 15:37:28.000000000 +0000
@@ -198,11 +198,11 @@
     {
       switch (event.type)
 	{
-	  
+
 	case SDL_VIDEORESIZE:
 	  Set_gl_resolution(event.resize.w, event.resize.h);
 	  break;
-	  
+
 	case SDL_KEYDOWN:
 	  Keys[event.key.keysym.sym] = 1;
 	  mod = SDL_GetModState ();
@@ -213,7 +213,7 @@
                 {
 		  close_gens();
 		}
-	      
+
 	      if (Debug)
 		{
 		  Change_Debug (0);
@@ -263,7 +263,7 @@
 		    //Set_Render (0, -1, 1);
 		   //else
 		  //  Set_Render (1, Render_FS, 1);*/
-		  
+
 			Full_Screen = !Full_Screen;
 			Set_Render(Full_Screen, Render_Mode, 1);
 			sync_gens_ui (UPDATE_GTK);
@@ -480,19 +480,19 @@
 		  Free_Rom (Game);
 		}
 	      break;
-		
-//		case SDLK_f:
-//		if (KMOD_CTRL & mod)
-//		{
-//			gl_linear_filter = !gl_linear_filter;
-//		}
-		
+
+		case SDLK_f:
+		if (KMOD_CTRL & mod)
+		{
+			gl_linear_filter = !gl_linear_filter;
+		}
+
 		break;
 
 	    case SDLK_g:
 	      if (KMOD_CTRL & mod)
 		{
-		  //if (Check_If_Kaillera_Running()) return 0;                                            
+		  //if (Check_If_Kaillera_Running()) return 0;
 		  MINIMIZE open_game_genie ();
 		}
 	      break;
@@ -500,13 +500,13 @@
            if (KMOD_CTRL & mod)
            {
                    gtk_widget_hide(gens_window);
-           }           
+           }
            else
            {
                    gtk_widget_show(gens_window);
            }
            break;
-                                          
+
 	    case SDLK_o:
 	      if (KMOD_CTRL & mod)
 		{
@@ -864,7 +864,7 @@
 
   if (!Init ())
     return 0;
-  
+
   if (0 != strcmp(Start_Rom, "")) {
     if (-1 == Open_Rom(Start_Rom)) {
       fprintf(stderr, "Failed to load %s\n", Start_Rom);
--- ./src/gens/sdllayer/g_sdldraw.c~	2008-09-01 21:17:58.000000000 +0000
+++ ./src/gens/sdllayer/g_sdldraw.c	2013-02-27 16:23:15.000000000 +0000
@@ -41,7 +41,7 @@
 int Sleep_Time;
 int FS_VSync;
 int W_VSync;
-int Stretch; 
+int Stretch;
 int Blit_Soft;
 int Effect_Color = 7;
 int FPS_Style = EMU_MODE | BLANC;
@@ -59,7 +59,7 @@
 int Texture_size=256;
 int Nonpow2tex = 0 ;
 int row_length;
-int gl_linear_filter=0;
+//int gl_linear_filter=0;
 int shift = 0;
 float h_stretch = 0;
 float v_stretch = 0;
@@ -94,7 +94,7 @@
 			case 0xE0: *tmp='a';break;//à
 			case 0xEE: *tmp='i';break;//î
 			default:break;
-		}	
+		}
 	}
 }
 
@@ -124,8 +124,8 @@
 int Init_draw_gl(int w, int h)
 {
 	screen = SDL_SetVideoMode(w,h,Bpp,sdl_flags|SDL_OPENGL|(Full_Screen?SDL_FULLSCREEN:0) | SDL_RESIZABLE);
-	
-	
+
+
 
 	if ( screen == NULL)
 	{
@@ -143,71 +143,71 @@
 
 	filter_buffer_size = row_length*Texture_size*sizeof(unsigned short);
 	filter_buffer = (unsigned short *) malloc(filter_buffer_size);
-	
+
         RGBA_buffer_size = 640*512*sizeof(unsigned int);
         RGBA_buffer=(unsigned long *) malloc(RGBA_buffer_size);
 
-		
+
 	glViewport(0, 0, screen->w,screen->h);
 
 	glMatrixMode(GL_PROJECTION);
  	glLoadIdentity();
- 
+
  	if (3*Width_gl > 4*Height_gl && Height_gl != 0)
  	  {
- 	    glOrtho (- ((float) 3*Width_gl)/((float) 4*Height_gl), 
+ 	    glOrtho (- ((float) 3*Width_gl)/((float) 4*Height_gl),
  		     ((float) 3*Width_gl)/((float) 4*Height_gl)
  		    , -1, 1, -1, 1);
- 
+
  	  }
  	else if (3*Width_gl < 4*Height_gl && Width_gl != 0)
  	  {
  	    glOrtho (-1, 1,
- 		    - ((float) 4*Height_gl)/((float) 3*Width_gl), 
+ 		    - ((float) 4*Height_gl)/((float) 3*Width_gl),
  		    ((float) 4*Height_gl)/((float) 3*Width_gl)
  		    , -1, 1);
- 
+
  	  }
  	else
  	  {
  	    glOrtho (-1, 1, -1, 1, -1, 1);
  	  }
-     
+
  	glMatrixMode(GL_MODELVIEW);
  	glLoadIdentity();
  	glDisable(GL_DEPTH_TEST);
   	glEnable(GL_TEXTURE_2D);
  	glGenTextures(1,textures);
-  	
-  	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);	
-  	
+
+  	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
+
   	SDL_GL_SetAttribute( SDL_GL_DEPTH_SIZE, 16 );
- 		
+
   	SDL_GL_SetAttribute( SDL_GL_RED_SIZE, 5 );
   	SDL_GL_SetAttribute( SDL_GL_GREEN_SIZE, 6 );
   	SDL_GL_SetAttribute( SDL_GL_BLUE_SIZE, 5 );
   	SDL_GL_SetAttribute( SDL_GL_ALPHA_SIZE,0 );
- 		
-  	
+
+
         glBindTexture(GL_TEXTURE_2D, textures[0]);
  	Clear_Screen();
- 
+
  	glTexImage2D(GL_TEXTURE_2D,
  	    0,GL_RGBA,Texture_size*2,Texture_size,0,GL_RGBA,GL_UNSIGNED_BYTE,NULL);
- 	
- 	gl_linear_filter ? glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR):
+
+ 	gl_linear_filter ? glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR),
+      glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR):
+      glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST),
 	  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
- 	
- 	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
- 	
+
  	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP);
  	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP);
- 
+
   	return 1;
 
 
 
-	
+
 }
 
 static gchar *WindowID = NULL;
@@ -215,18 +215,18 @@
 int Init_draw_sdl(int w, int h)
 {
 	screen = SDL_SetVideoMode(w,h,16,sdl_flags|(Full_Screen?SDL_FULLSCREEN:0));
-	
+
 	if ( screen==NULL)
 	{
 		fprintf(stderr, "Error creating SDL primary surface : %s\n", SDL_GetError());
 		exit(0);
 	}
-	
+
 	return 1;
-}	
+}
 
 int Init_DDraw()
-{	
+{
 	int x;
 	int w, h;
 
@@ -244,7 +244,7 @@
 		}
 		h = w * 0.75; 	/*640*0.75 = 480 , 320*0.75 = 240*/
 	}
-	
+
 	if (Full_Screen) {
 		gtk_widget_hide(lookup_widget(gens_window, "sdlsock"));
 
@@ -260,37 +260,37 @@
 		gtk_widget_set_size_request(sdlsock, w, h);
 		gtk_widget_realize(sdlsock);
 		gtk_widget_show(sdlsock);
-               
+
 		/* Let GTK catch up. */
 		while (gtk_events_pending())
 			gtk_main_iteration_do(FALSE);
-               
+
 		if (!WindowID) {
 			WindowID = g_strdup_printf("%ld",
 					GDK_WINDOW_XWINDOW(sdlsock->window));
 			setenv("SDL_WINDOWID", WindowID, 1);
 		}
 	}
-	
+
 	if (SDL_InitSubSystem(SDL_INIT_VIDEO) < 0)
 		Init_Fail(0,"Couldn't init embedded SDL.\n");
 	Set_Game_Name();
-	
+
 	if(Opengl) {
 	x=Init_draw_gl(w, h);
-	
+
 	}
 	else
 	x=Init_draw_sdl(w, h);
-	
+
 	if (Full_Screen )
 	{
 		SDL_ShowCursor(SDL_DISABLE);
 	}
 	Adjust_Stretch();
-	
+
 	shift=(Render_Mode!=1);
-	
+
 	return x;
 }
 
@@ -305,30 +305,30 @@
 		filter_buffer=NULL;
                 RGBA_buffer=NULL;
 	}
-	
+
 }
 
 void End_draw_sdl()
 
 {
-	
+
 }
 
 void End_DDraw()
-{	
+{
 	if(Opengl)
 	End_draw_gl();
-	
+
 	else
 	End_draw_sdl();
-	
+
 	SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
 void Clear_Screen()
 {
-	
-	
+
+
 	if(Opengl)
 	{
 		glClear(GL_COLOR_BUFFER_BIT);
@@ -336,88 +336,88 @@
                   memset(filter_buffer,0,filter_buffer_size);
                 }
 	}
-	
+
 	else
 	{
 		SDL_LockSurface(screen);
-	
+
 		SDL_FillRect(screen,0,0);
-	
+
 		SDL_UnlockSurface(screen);
-	
+
 	}
-	
+
 }
 
 void Flip_gl()
 {
-	   
-  if (Full_Screen)		
+
+  if (Full_Screen)
     {	Blit_FS((unsigned char *) filter_buffer + (((row_length*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift ), row_length*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);
     }
   else
-    {	Blit_W((unsigned char *) filter_buffer + (((row_length*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift ), row_length*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);		    
+    {	Blit_W((unsigned char *) filter_buffer + (((row_length*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift ), row_length*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);
     }
-  	
+
   Gens_2_RGBA_BYTE(RGBA_buffer,filter_buffer, row_length*row_length*0.75);
-  
+
   glBindTexture(GL_TEXTURE_2D, textures[0]);
-  	
+
   glPixelStorei(GL_UNPACK_ROW_LENGTH,row_length);		//Opengl needs to know the width of the texture data
-  	
+
   glPixelStorei(GL_UNPACK_SKIP_PIXELS, 0);
   glPixelStorei(GL_UNPACK_ALIGNMENT,8);
-  
+
   //glBindTexture(GL_TEXTURE_2D, textures[0]);
-  		
-  
+
+
   glTexSubImage2D(GL_TEXTURE_2D,
  		  0,0,(240-VDP_Num_Vis_Lines)>>1<<shift,row_length,row_length*0.75-((240 - VDP_Num_Vis_Lines) <<shift)
  		  ,GL_RGBA,GL_UNSIGNED_BYTE,((char *)RGBA_buffer) + (4*row_length * ((240 - VDP_Num_Vis_Lines)>>1)  << shift));
-  	
-  
+
+
   //glBindTexture(GL_TEXTURE_2D, textures[0]);
-  	
-  glBegin(GL_QUADS);			
-  
+
+  glBegin(GL_QUADS);
+
   glTexCoord2f(0.0f + h_stretch, v_stretch );	// Upleft corner of thetexture
   glVertex2f(-1.0f, 1.0f);	// Upleft vertex of the quad
-  
-  
+
+
   glTexCoord2f(0.625f - h_stretch, v_stretch );// UpRight corner of the texture 0.625 == 320/512 ,0.625 == 640/1024
-  glVertex2f( 1, 1.0f);		// UpRight vertex of the quad		
-  
-  
+  glVertex2f( 1, 1.0f);		// UpRight vertex of the quad
+
+
   glTexCoord2f(0.625f - h_stretch, 0.9375f - v_stretch );// DownRight corner of the texture  0.9375 == 256/240 .  0.9375 == 512/480
   glVertex2f( 1 , -1.0f);		// DownRight vertex of the quad
-  
-  
-  glTexCoord2f(0.0f + h_stretch, 0.9375f - v_stretch );	// DownLeft corner of the first texture 
+
+
+  glTexCoord2f(0.0f + h_stretch, 0.9375f - v_stretch );	// DownLeft corner of the first texture
   glVertex2f(-1.0f,  -1.0f);	// DownLeft vertex of the quad
-  	
+
   glEnd();
-  	
-  	
+
+
   SDL_GL_SwapBuffers();
-	
+
 }
 
 void Flip_sdl()
 {
 	SDL_LockSurface(screen);
-	
-	if (Full_Screen)		
+
+	if (Full_Screen)
 	{	Blit_FS((unsigned char *) screen->pixels + (((screen->w*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift ), screen->w*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);
 	}
 	else
-	{	Blit_W((unsigned char *) screen->pixels + (((screen->w*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift), screen->w*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);		    
+	{	Blit_W((unsigned char *) screen->pixels + (((screen->w*2) * ((240 - VDP_Num_Vis_Lines) >> 1) + Dep) << shift), screen->w*2, 320 - Dep, VDP_Num_Vis_Lines, 32 + Dep * 2);
 	}
-	
-	
+
+
 	SDL_UnlockSurface(screen);
-	
+
 	SDL_Flip(screen);
-	
+
 }
 
 int Flip(void)
@@ -427,8 +427,8 @@
 	static float FPS = 0.0f, frames[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 	static unsigned int old_time = 0, view_fps = 0, index_fps = 0, freq_cpu[2] = {0, 0};
 	unsigned int new_time[2];
-	
-	
+
+
 
 	if (Message_Showed)
 	{
@@ -437,21 +437,21 @@
 			Message_Showed = 0;
 			strcpy(Info_String, "");
 		}
-		else 
+		else
 		{
 			Print_Text(Info_String, strlen(Info_String), 10, 210, Message_Style);
 		}
 
 	}
 	else if (Show_FPS && (Genesis_Started || _32X_Started || SegaCD_Started) && !Paused)
-	{	
+	{
 		if (freq_cpu[0] > 1)				// accurate timer ok
 		{
 			if (++view_fps >= 16)
 			{
 				GetPerformanceCounter((long long *) new_time);
 				if (new_time[0] != old_time)
-				{					
+				{
 					FPS = (float) (freq_cpu[0]) * 16.0f / (float) (new_time[0] - old_time);
 					sprintf(Info_String, "%.1f", FPS);
 				}
@@ -469,7 +469,7 @@
 			if (++view_fps >= 10)
 			{
 				new_time[0] = GetTickCount();
-		
+
 				if (new_time[0] != old_time) frames[index_fps] = 10000 / (float)(new_time[0] - old_time);
 				else frames[index_fps] = 2000;
 
@@ -500,7 +500,7 @@
 	if (Fast_Blur) Half_Blur();
 
 	Old_Dep=Dep;
-	
+
 	if ((VDP_Reg.Set4 & 0x1) || (Debug))
 	{
 		Dep = 0;
@@ -511,23 +511,23 @@
 	}
 	if(Dep!=Old_Dep){
 	Adjust_Stretch();
-		
-	
+
+
 	if(Dep==64 && Old_Dep==0)
 	Clear_Screen();
-	
-	
+
+
 	}
-	
-	
+
+
 	if(Opengl)
 	Flip_gl();
-	
+
 	else
 	Flip_sdl();
-	
+
 	/*if(W_VSync || FS_VSync) vsync();*/
-	
+
 	return 1;
 }
 
@@ -545,7 +545,7 @@
 		SDL_Surface* Logo;
 
 		Logo = SDL_LoadBMP(DATADIR "/gens_big.bmp");
-		
+
 		SDL_LockSurface(Logo);
 		memcpy(tab, Logo->pixels, 64000);
 		SDL_UnlockSurface(Logo);
@@ -723,7 +723,7 @@
 			// only updating the frame when we have 'lots' in
 			// the audio buffer. Hence the audio is a couple of
 			// cycles ahead of the graphics.
-			
+
 			Write_Sound_Buffer(NULL);
 			while (!Lots_In_Audio_Buffer())
 			{
@@ -735,7 +735,7 @@
 			Update_Frame();
 			Flip();
 		} //If sound is enabled
-		
+
 		else
 		{
 			if (CPU_Mode) current_div = 20;
@@ -763,7 +763,7 @@
 			}
 			else {Sleep(Sleep_Time);}
 		} //If sound is not enabled
-		
+
 	}
 
 	return 1;
@@ -869,7 +869,7 @@
 			}
 
 			nr = nv = nb = (r + v + b) / 3;
-			
+
 			if ((nb <<= 1) > 31) nb = 31;
 
 			nr &= 0x1E;
@@ -900,35 +900,35 @@
 {
 	if(Opengl)
 	Save_Shot((unsigned char *) filter_buffer, Mode_555 & 1, row_length, row_length*0.75, row_length*2);
-	
+
 	else
 	Save_Shot((unsigned char *) screen->pixels, Mode_555 & 1, screen->w, screen->h, screen->w*2);
-	
+
   	return 0;
 }
 
 void Refresh_video()
 {
 	End_DDraw();
-	
+
 	Init_DDraw();
-	 
-	Adjust_Stretch(); 
+
+	Adjust_Stretch();
 }
 
 void Set_gl_resolution(int w,int h){
-	
+
 	if((Opengl)&& (Width_gl!=w ||Height_gl!=h ))
 	{
-	
+
 	Width_gl=w;
 	Height_gl=h;
 
 	Set_Render(Full_Screen,Render_Mode,0);
-	
+
 	}
-	
-	
+
+
 }
 
 void Set_Bpp(int newbpp)
@@ -936,65 +936,65 @@
 	if(Bpp!=newbpp)
 	{
 		Bpp=newbpp;
-		
+
 		End_DDraw();
-		
+
 		Init_DDraw();
 	}
-	
+
 }
 
 void Change_backend()
 {
 	End_DDraw();
-	
+
 	Opengl=!Opengl;
-	
+
 	Init_DDraw();
-	
+
 	if(Opengl)
 	MESSAGE_L("Selected Opengl Renderer", "Selected Opengl Renderer", 1500)
-	
+
 	else
 	MESSAGE_L("Selected SDL Renderer", "Selected SDL Renderer", 1500)
-	
+
 }
 /*
 void vsync(){
 if(Opengl){
-	
-	
-}	
+
+
+}
 else{
-	
+
 }
-	
+
 }
 */
 
 void Adjust_Stretch(){
-	
+
 	if(Opengl){
-	
+
 	  if(Stretch){
-		
+
 			if(Nonpow2tex)
 			{
 				v_stretch = ( (240 - VDP_Num_Vis_Lines)/2.0f) *  row_length*0.75  * 	1/240;
 				h_stretch = Dep * 32.0f/64.0f * row_length/320;
-			}	
-		
-			else	
+			}
+
+			else
 			{
 				v_stretch = (240 - VDP_Num_Vis_Lines)/240.0f/2;
-				h_stretch = Dep * 0.0625f/64.0;	
-			}	
+				h_stretch = Dep * 0.0625f/64.0;
+			}
 		}
-	
+
 		else{
 		v_stretch = 0;
-		h_stretch = 0;	
+		h_stretch = 0;
 		}
 	}
-		
+
 }
